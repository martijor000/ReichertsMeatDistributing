@using ReichertsMeatDistributing.Client.Services;
@using ReichertsMeatDistributing.Shared;
@inject IDealService ideal;
@page "/admin/deals/edit/{id:int}"
@inject NavigationManager navigationManager

<AuthenticationGuard>
    <div id="container">
    <h1>Edit Deal</h1>
    @if (deal == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <EditForm Model="@deal" OnValidSubmit="UpdateDeal">
            <div class="form-group">
                <label for="name">Name</label>
                <InputText class="form-control" id="name" @bind-Value="@deal.Name" />
            </div>
            <div class="form-group">
                <label for="description">Description</label>
                <InputText class="form-control" id="description" @bind-Value="@deal.Description" />
            </div>
            <div class="form-group">
                <label for="price">Price:</label>
                <InputNumber class="form-control" @bind-Value="deal.Price" step="0.01" />
            </div>

            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-danger" @onclick="DeleteDeal">Delete</button>
        </EditForm>
    }
    </div>
</AuthenticationGuard>

@code {
    [Parameter]
    public int? Id { get; set; }

    private WeeklyDeal deal;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadDealAsync();
        }
        catch (Exception ex)
        {
            // If there's an error, redirect to login
            navigationManager.NavigateTo("/login");
        }
    }

    private async Task LoadDealAsync()
    {
        // Get the deal ID from the URL
        string uri = navigationManager.Uri;
        int idStartIndex = uri.LastIndexOf("/") + 1;
        int idLength = uri.Length - idStartIndex;
        if (int.TryParse(uri.Substring(idStartIndex, idLength), out int dealId))
        {
            deal = await ideal.GetDealById(dealId);
        }
        else
        {
            // Deal ID was not provided or is not a valid integer
            // Handle error or redirect to a default page
        }
    }

    private async Task UpdateDeal()
    {
        string uri = navigationManager.Uri;
        int idStartIndex = uri.LastIndexOf("/") + 1;
        int idLength = uri.Length - idStartIndex;
        if (int.TryParse(uri.Substring(idStartIndex, idLength), out int dealId))
        {
            await ideal.UpdateDeal(dealId, deal);
        }
        else
        {
            // Deal ID was not provided or is not a valid integer
            // Handle error or redirect to a default page
        }
        navigationManager.NavigateTo("/admin/deals");
    }

    private async Task DeleteDeal()
    {

        string uri = navigationManager.Uri;
        int idStartIndex = uri.LastIndexOf("/") + 1;
        int idLength = uri.Length - idStartIndex;
        if (int.TryParse(uri.Substring(idStartIndex, idLength), out int dealId))
        {
            await ideal.DeleteDeal(dealId);
        }
        else
        {
            // Deal ID was not provided or is not a valid integer
            // Handle error or redirect to a default page
        }
        navigationManager.NavigateTo("/admin/deals");
    }
}
