@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Authorization
@using ReichertsMeatDistributingWebProject.Models;
@page "/admin/deals/edit/{id:int}"
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
<div id="container">
<h1>Edit Deal</h1>
    @if (deal == null)
    {
        <p>Loading...</p>
    }
    else
    {
    <form>
        <div class="form-group">
            <label for="name">Name</label>
            <input type="text" class="form-control" id="name" @bind-value="@deal.Name">
        </div>
        <div class="form-group">
            <label for="description">Description</label>
            <input type="text" class="form-control" id="description" @bind-value="@deal.Description">
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <input type="number" class="form-control" id="price" @bind-value="@deal.Price">
        </div>
        <button type="submit" class="btn btn-primary" @onclick="UpdateDeal">Save</button>
        <button type="button" class="btn btn-danger" @onclick="DeleteDeal">Delete</button>
    </form>
    }
</div>

@code {
    [Parameter]
    public int id { get; set; }

    private Deal deal;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/");
        }
        else if (!user.IsInRole("admin"))
        {
            navigationManager.NavigateTo("/");
        }
        await LoadDealAsync();
    }

    private async Task LoadDealAsync()
    {
        // Get the deal ID from the URL
        string uri = navigationManager.Uri;
        int idStartIndex = uri.LastIndexOf("/") + 1;
        int idLength = uri.Length - idStartIndex;
        if (int.TryParse(uri.Substring(idStartIndex, idLength), out int dealId))
        {
            // Use the ProductService to retrieve the deal with the specified ID
            //deal = await dealService.GetDealByIdAsync(dealId);
        }
        else
        {
            // Deal ID was not provided or is not a valid integer
            // Handle error or redirect to a default page
        }
    }

    private async Task UpdateDeal()
    {
        //await dealService.UpdateDeal(deal);
        navigationManager.NavigateTo("/admin/deals");
    }

    private async Task DeleteDeal()
    {
        if (deal != null)
        {
            //await dealService.DeleteDealAsync(deal.id);
            navigationManager.NavigateTo("/admin/deals");
        }
    }
}