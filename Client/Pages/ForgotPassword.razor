@page "/forgot-password"
@using ReichertsMeatDistributing.Client.Services
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title text-center">Forgot Password</h2>
                    @if (!resetSuccess)
                    {
                        <form id="passwordResetForm">
                            <div class="form-group">
                                <label for="username">Username:</label>
                                <input id="username" type="text" class="form-control" @bind="Username" required />
                            </div>
                            <div class="form-group">
                                <button type="button" class="btn btn-block" @onclick="SendResetEmail">Reset Password</button>
                            </div>
                        </form>
                    }
                    else if (!verificationCodeSent)
                    {
                        <form id="verificationCodeForm">
                            <div class="form-group">
                                <label for="verificationCode">Verification Code:</label>
                                <input id="verificationCode" type="text" class="form-control" @bind="VerificationCode" required />
                            </div>
                            <div class="form-group">
                                <button type="button" class="btn btn-block" @onclick="VerifyCode">Verify Code</button>
                            </div>
                        </form>
                    }
                    else
                    {
                        <form id="passwordChangeForm">
                            <div class="form-group">
                                <label for="newPassword">New Password:</label>
                                <input id="newPassword" type="password" class="form-control" @bind="NewPassword" required />
                            </div>
                            <div class="form-group">
                                <button type="button" class="btn btn-block" @onclick="ResetPassword">Reset Password</button>
                            </div>
                        </form>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string Username { get; set; }
    private string VerificationCode { get; set; }
    private string NewPassword { get; set; }
    private bool resetSuccess = false;
    private bool verificationCodeSent = false;
    private string adminEmail;

    [Inject]
    private AdminService adminService { get; set; }

    private async Task SendResetEmail()
    {
        // Call the API service to get the admin email
        adminEmail = await adminService.GetAdminEmail();

        // Check if the provided username matches the admin email
        if (Username == adminEmail)
        {
            // Generate a verification code
            string verificationCode = GenerateVerificationCode();

            // Prepare the form data
            var formData = new Dictionary<string, string>
            {
                { "username", Username },
                { "adminEmail", adminEmail },
                { "verificationCode", verificationCode }
            };

            // Convert form data to JSON
            var json = System.Text.Json.JsonSerializer.Serialize(formData);

            // Send the data to FormSubmit.co API
            var response = await HttpClient.PostAsync("https://formsubmit.co/el/zokeva", new StringContent(json, System.Text.Encoding.UTF8, "application/json"));

            // Check if the request was successful
            if (response.IsSuccessStatusCode)
            {
                // Update the state to indicate that the verification code has been sent
                verificationCodeSent = true;
            }
            else
            {

            }
        }
        else
        {
            
        }
    }

    private string GenerateVerificationCode()
    {
        // Implement logic to generate a random verification code
        // For simplicity, let's generate a random 6-digit code
        Random rand = new Random();
        return rand.Next(100000, 999999).ToString();
    }

    private async Task VerifyCode()
    {
        // Perform verification of the entered verification code
        // For simplicity, let's assume the code is correct
        // You can add logic to verify the code against the generated code

        // Move to the next step of resetting the password
        verificationCodeSent = false;
    }

    private async Task ResetPassword()
    {
        // Implement the logic to reset the password
        // For simplicity, let's assume the password is reset successfully

        // Redirect to the confirmation page
        NavigationManager.NavigateTo("/confirmation-page");
    }
}
