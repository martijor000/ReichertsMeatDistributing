@page "/Products"
@using ReichertsMeatDistributing.Shared;
@using System.Net.Http.Json;
@using Microsoft.JSInterop;

<div class="products-container">
    <!-- Sidebar with Filters and PDF Link -->
    <div class="products-sidebar">
        <div class="sidebar-header">
            <h3>Product Catalog</h3>
        </div>
        
        <!-- PDF Download Section -->
        <button class="btn-pdf" @onclick="DownloadCatalog" disabled="@IsDownloadingPdf">
            @if (IsDownloadingPdf)
            {
                <span class="spinner-border spinner-border-sm me-2"></span>
                <span>Downloading...</span>
            }
            else
            {
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z"/>
                    <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z"/>
                </svg>
                <span>Download Catalog</span>
            }
        </button>

        <!-- Search and Filters -->
        <div class="filters-section">
            <h4>üîç Search & Filters</h4>
            
            <div class="filter-group">
                <label>Search Products</label>
                <input type="text" 
                       class="search-input" 
                       @bind="@Search" 
                       @oninput="UpdateSearch" 
                       placeholder="Type product name..." />
            </div>

            <div class="filter-group">
                <label>Business Category</label>
                <select class="category-select" @bind="@SelectedCategory" @onclick="SelectedCat">
                    <option value="@BusinessCategory.All">All Categories</option>
                    <option value="@BusinessCategory.Bars">Bars</option>
                    <option value="@BusinessCategory.Restaurants">Restaurants</option>
                    <option value="@BusinessCategory.BurgerBars">Burger Bars</option>
                    <option value="@BusinessCategory.CoffeeShops">Coffee Shops</option>
                    <option value="@BusinessCategory.ConvenienceStores">Convenience Stores</option>
                </select>
            </div>
        </div>

        <!-- Results Summary -->
        <div class="results-summary">
            <p><strong>@DisplayedProductItems.Count</strong> of <strong>@FilteredProductItems.Count</strong> filtered products</p>
            <div class="pagination-info">
                <span>Page @(CurrentPage) of @TotalPages</span>
            </div>
        </div>
    </div>

    <!-- Main Products Grid -->
    <div class="products-main">
        @if (IsLoading)
        {
            <div class="loading-state">
                <div class="spinner"></div>
                <h3>Loading Products...</h3>
                <p>Fetching your product catalog</p>
            </div>
        }
        else if (!DisplayedProductItems.Any())
        {
            <div class="empty-state">
                <div class="empty-icon">üì¶</div>
                <h3>No Products Found</h3>
                <p>Try adjusting your search or filters</p>
                <button class="btn-reset" @onclick="ResetFilters">Reset Filters</button>
            </div>
        }
        else
        {
            <div class="products-grid">
                @foreach (var item in DisplayedProductItems)
                {
                    <div class="product-card">
                        <div class="product-header">
                            <h4 class="product-name">@item.ItemDescription</h4>
                            <span class="product-category">@GetCategoryName(item.Category)</span>
                        </div>
                        
                        <div class="product-details">
                            <div class="detail-row">
                                <span class="detail-label">Item ID:</span>
                                <span class="detail-value">@item.ItemID</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Stocking Unit:</span>
                                <span class="detail-value">@item.StockingUM</span>
                            </div>
                            @if (item.Price.HasValue)
                            {
                                <div class="detail-row price-row">
                                    <span class="detail-label">Price:</span>
                                    <span class="detail-value price">@item.Price.Value.ToString("C")</span>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>

            <!-- Pagination Controls - Simplified -->
            @if (TotalPages > 1)
            {
                <div class="pagination-controls">
                    <button class="btn-page" @onclick="() => GoToPage(CurrentPage - 1)" disabled="@(CurrentPage == 1)">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
                        </svg>
                        Previous
                    </button>

                    <div class="page-numbers">
                        @for (int i = StartPage; i <= EndPage; i++)
                        {
                            var pageNum = i;
                            <button class="btn-page @(pageNum == CurrentPage ? "active" : "")" @onclick="() => GoToPage(pageNum)">
                                @pageNum
                            </button>
                        }
                    </div>

                    <button class="btn-page" @onclick="() => GoToPage(CurrentPage + 1)" disabled="@(CurrentPage == TotalPages)">
                        Next
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
                        </svg>
                    </button>
                </div>
            }
        }
    </div>
</div>

@code {
    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    private List<ProductItem> ProductItems = new();
    private List<ProductItem> DisplayedProductItems = new();
    private string Search = "";
    private BusinessCategory SelectedCategory = BusinessCategory.All;
    private bool IsLoading = true;
    private bool IsDownloadingPdf = false;
    
    // Pagination
    private int CurrentPage = 1;
    private int PageSize = 12;
    private List<ProductItem> FilteredProductItems = new();
    private int TotalPages => (int)Math.Ceiling((double)FilteredProductItems.Count / PageSize);
    private int StartPage => Math.Max(1, CurrentPage - 2);
    private int EndPage => Math.Min(TotalPages, CurrentPage + 2);

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        IsLoading = true;
        try
        {
            var response = await Http.GetAsync("api/products");
            if (response.IsSuccessStatusCode)
            {
                ProductItems = await response.Content.ReadFromJsonAsync<List<ProductItem>>() ?? new();
                ApplyFilters();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading products: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void ApplyFilters()
    {
        var filtered = ProductItems.AsEnumerable();

        // Apply category filter
        if (SelectedCategory != BusinessCategory.All)
        {
            filtered = filtered.Where(p => p.Category == SelectedCategory);
        }

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(Search))
        {
            var searchLower = Search.ToLower();
            filtered = filtered.Where(p =>
                (p.ItemDescription?.ToLower().Contains(searchLower) ?? false) ||
                (p.ItemID?.ToLower().Contains(searchLower) ?? false)
            );
        }

        FilteredProductItems = filtered.ToList();
        CurrentPage = 1; // Reset to first page when filters change
        UpdateDisplayedProducts();
    }

    private void UpdateDisplayedProducts()
    {
        var startIndex = (CurrentPage - 1) * PageSize;
        var endIndex = Math.Min(startIndex + PageSize, FilteredProductItems.Count);
        
        if (startIndex < FilteredProductItems.Count)
        {
            DisplayedProductItems = FilteredProductItems.Skip(startIndex).Take(PageSize).ToList();
        }
        else
        {
            DisplayedProductItems = new List<ProductItem>();
        }
    }

    private void UpdateSearch(ChangeEventArgs e)
    {
        Search = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void SelectedCat()
    {
        ApplyFilters();
    }

    private void ResetFilters()
    {
        Search = "";
        SelectedCategory = BusinessCategory.All;
        ApplyFilters();
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            CurrentPage = page;
            UpdateDisplayedProducts();
        }
    }

    private string GetCategoryName(BusinessCategory category)
    {
        return category switch
        {
            BusinessCategory.BurgerBars => "Burger Bars",
            BusinessCategory.CoffeeShops => "Coffee Shops",
            BusinessCategory.ConvenienceStores => "Convenience Stores",
            BusinessCategory.Bars => "Bars",
            BusinessCategory.Restaurants => "Restaurants",
            _ => category.ToString()
        };
    }

    private async Task DownloadCatalog()
    {
        IsDownloadingPdf = true;
        try
        {
            var response = await Http.GetAsync("api/products/download-catalog");
            if (response.IsSuccessStatusCode)
            {
                var pdfBytes = await response.Content.ReadAsByteArrayAsync();
                var fileName = $"Reicherts_Product_Catalog_{DateTime.Now:yyyyMMdd}.pdf";
                
                // Trigger download using JavaScript
                await JSRuntime.InvokeVoidAsync("downloadFile", Convert.ToBase64String(pdfBytes), "application/pdf", fileName);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to download PDF catalog. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error downloading catalog: {ex.Message}");
        }
        finally
        {
            IsDownloadingPdf = false;
        }
    }
}
